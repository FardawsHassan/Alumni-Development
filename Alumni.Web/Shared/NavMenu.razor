@inject AuthenticationStateProvider AuthencationStateProvider
@inject NavigationManager NavigationManager
@using Alumni.Web.Services

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">CSE Alumni</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href=@($"profile/edit/{profileId}") Match="NavLinkMatch.All">
                <span class="oi oi-pencil" aria-hidden="true"></span> Edit Profile
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href=@($"profile/view/{profileId}") Match="NavLinkMatch.All">
                <span class="oi oi-eye" aria-hidden="true"></span> View Profile
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="search" Match="NavLinkMatch.All">
                <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Find Alumni
            </NavLink>
        </div>
    </nav>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> _authenticationState { get; set; }
    [Inject]
    private IProfileService ProfileService { get; set; }

    private bool collapseNavMenu = true;
    public string userEmail { get; set; } = string.Empty;
    public int? profileId { get; set; } = null;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;


    protected async override Task OnInitializedAsync()
    {
        var user = (await _authenticationState).User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            userEmail = user.Identity.Name ?? "";
            profileId = await ProfileService.GetProfileIdByEmail(userEmail);
        }
        else
        {
            NavigationManager.NavigateTo("Identity/Account/Login", forceLoad: true);
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
